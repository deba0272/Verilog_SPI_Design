Code:
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 17.09.2024 16:08:26
// Design Name: 
// Module Name: spi
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module spi(
  input wire clk,
  input wire start,
  input wire rst,
  input [11:0]din,
  output reg cs,
  output reg sclk,
  output reg mosi,
  output reg done
);
  reg [3:0] bit_count;//to record the number of bits transmitted
  reg [31:0] count;
  reg [1:0]state;
  reg [11:0]shift_reg;//to store the data
  reg sclk_enable;
  parameter divisor=5;
 
  localparam idle=0;
  localparam start_tx=1;
  localparam send=2;
  localparam end_tx=3;
 
  //SPI clock generator
  always@(posedge clk or posedge rst)
    begin
      if(rst)
        begin
          count<=0;
          sclk<=0;
          sclk_enable<=0;
        end
      else if(sclk_enable)
        begin
          if(count==(divisor/2)-1)
            begin
              sclk<=~sclk;
              count<=0;
            end
          else
            begin
              count<=count+1;
            end
            end
          else
            begin
              sclk<=0;
            end
        end
   //FSM for transmission
      always@(posedge clk or posedge rst)
        begin
        if(rst)
        begin
          state<=idle;
          cs<=1;
          done<=0;
          bit_count<=0;
          shift_reg<=12'b0;
          mosi<=0;
          sclk_enable<=0;
        end
      else
        begin
          case(state)
            idle:
              begin
                done<=0;
                cs<=1;
                if(start)
                begin
                  shift_reg<=din;
                  bit_count<=0;
                  sclk_enable<=1;
                  state<=start_tx;
                end
              end
            start_tx:
              begin
                cs<=0;
                state<=send;
              end
            send:
              begin
                mosi<=shift_reg[11];
                shift_reg<=shift_reg<<1;
                bit_count<=bit_count+1;
                if(bit_count==12)
                  begin
                    state<=end_tx;
                  end
              end
            end_tx:
              begin
                cs<=1;
                done<=1;
                sclk_enable<=0;
                state<=idle;
              end
            default:state<=idle;
          endcase
        end
    end
endmodule




TestBench:
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 17.09.2024 16:10:17
// Design Name: 
// Module Name: spi_tb
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module spi_tb();

    // Inputs
    reg clk;
    reg rst;
    reg start;
    reg [11:0] din;
    wire cs;
    wire mosi;
    wire done;
    wire sclk;
   
    spi uut (
        .clk(clk),
        .rst(rst),
        .start(start),
        .din(din),
        .cs(cs),
        .mosi(mosi),
        .done(done),
        .sclk(sclk)
    );
    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end
    
    initial begin
        rst = 1;              
        start = 0;
        din = 12'b000000000000;  
        #20 rst = 0; 
     
        $display("Case 1: Normal transmission of data 101010101010");
        din = 12'b101010101010;
        start = 1;           
        #10;
        start = 0;            

        fork
            begin
                while(done == 0)begin
                    #10;
                end
                $display("Transmission Complete at time: %0t", $time);
            end
        join

        $display("Case 2: Transmission of all 1's data");
        din = 12'b111111111111;
        start = 1;
        #10;
        start = 0;

        fork
            begin
                while (done == 0) begin
                    #10;
                end
                $display("Transmission Complete at time: %0t", $time);
            end
        join
        $display("Case 3: Transmission of all 0's data");
        din = 12'b000000000000;
        start = 1;
        #10;
        start = 0;

        fork
            begin
                while (done == 0) begin
                    #10;
                end
                $display("Transmission Complete at time: %0t", $time);
            end
        join

        $display("Case 4: Transmission of random data 110011001100");
        din = 12'b110011001100;
        start = 1;
        #10;
        start = 0;
        fork
            begin
                while (done == 0) begin
                    #10;
                end
                $display("Transmission Complete at time: %0t", $time);
            end
        join
        $display("Case 5: Assert start mid-transmission");
        din = 12'b100110011001;
        start = 1;
        #10;
        start = 0;
       
       //Here it is checked that if start signal is given then there woulb be no change in mosi 
        #20;
        start = 1;
        #10;
        start = 0;

        fork
            begin
                while (done == 0) begin
                    #10;
                end
                $display("Transmission Complete after edge case at time: %0t", $time);
            end
        join

        $stop;
    end
    initial begin
        $monitor("Time=%0t | clk=%b | rst=%b | start=%b | din=%b | cs=%b | mosi=%b | sclk=%b | done=%b",
                 $time, clk, rst, start, din, cs, mosi, sclk, done);
    end
endmodule

